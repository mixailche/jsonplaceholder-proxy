/*
 * This file is generated by jOOQ.
 */
package mixailche.jsonplaceholder.proxy.jooq.tables.records;


import mixailche.jsonplaceholder.proxy.jooq.enums.AccessLevel;
import mixailche.jsonplaceholder.proxy.jooq.enums.EventMethod;
import mixailche.jsonplaceholder.proxy.jooq.enums.EventResult;
import mixailche.jsonplaceholder.proxy.jooq.tables.Events;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsRecord extends UpdatableRecordImpl<EventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.events.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.events.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.events.user_id</code>.
     */
    public void setUserId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.events.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.events.creation_time</code>.
     */
    public void setCreationTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.events.creation_time</code>.
     */
    public LocalDateTime getCreationTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.events.query_url</code>.
     */
    public void setQueryUrl(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.events.query_url</code>.
     */
    public String getQueryUrl() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.events.required_access</code>.
     */
    public void setRequiredAccess(AccessLevel value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.events.required_access</code>.
     */
    public AccessLevel getRequiredAccess() {
        return (AccessLevel) get(4);
    }

    /**
     * Setter for <code>public.events.method</code>.
     */
    public void setMethod(EventMethod value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.events.method</code>.
     */
    public EventMethod getMethod() {
        return (EventMethod) get(5);
    }

    /**
     * Setter for <code>public.events.result</code>.
     */
    public void setResult(EventResult value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.events.result</code>.
     */
    public EventResult getResult() {
        return (EventResult) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventsRecord
     */
    public EventsRecord() {
        super(Events.EVENTS);
    }

    /**
     * Create a detached, initialised EventsRecord
     */
    public EventsRecord(Long id, Long userId, LocalDateTime creationTime, String queryUrl, AccessLevel requiredAccess, EventMethod method, EventResult result) {
        super(Events.EVENTS);

        setId(id);
        setUserId(userId);
        setCreationTime(creationTime);
        setQueryUrl(queryUrl);
        setRequiredAccess(requiredAccess);
        setMethod(method);
        setResult(result);
        resetChangedOnNotNull();
    }
}
