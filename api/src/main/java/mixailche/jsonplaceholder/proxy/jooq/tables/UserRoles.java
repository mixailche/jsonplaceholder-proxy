/*
 * This file is generated by jOOQ.
 */
package mixailche.jsonplaceholder.proxy.jooq.tables;


import mixailche.jsonplaceholder.proxy.jooq.Keys;
import mixailche.jsonplaceholder.proxy.jooq.Public;
import mixailche.jsonplaceholder.proxy.jooq.tables.records.UserRolesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRoles extends TableImpl<UserRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_roles</code>
     */
    public static final UserRoles USER_ROLES = new UserRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRolesRecord> getRecordType() {
        return UserRolesRecord.class;
    }

    /**
     * The column <code>public.user_roles.user_id</code>.
     */
    public final TableField<UserRolesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_roles.role_id</code>.
     */
    public final TableField<UserRolesRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private UserRoles(Name alias, Table<UserRolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserRoles(Name alias, Table<UserRolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    public UserRoles(String alias) {
        this(DSL.name(alias), USER_ROLES);
    }

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    public UserRoles(Name alias) {
        this(alias, USER_ROLES);
    }

    /**
     * Create a <code>public.user_roles</code> table reference
     */
    public UserRoles() {
        this(DSL.name("user_roles"), null);
    }

    public <O extends Record> UserRoles(Table<O> path, ForeignKey<O, UserRolesRecord> childPath, InverseForeignKey<O, UserRolesRecord> parentPath) {
        super(path, childPath, parentPath, USER_ROLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserRolesPath extends UserRoles implements Path<UserRolesRecord> {
        public <O extends Record> UserRolesPath(Table<O> path, ForeignKey<O, UserRolesRecord> childPath, InverseForeignKey<O, UserRolesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserRolesPath(Name alias, Table<UserRolesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserRolesPath as(String alias) {
            return new UserRolesPath(DSL.name(alias), this);
        }

        @Override
        public UserRolesPath as(Name alias) {
            return new UserRolesPath(alias, this);
        }

        @Override
        public UserRolesPath as(Table<?> alias) {
            return new UserRolesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<UserRolesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ROLES__USER_ROLES_USER_ID_FKEY, Keys.USER_ROLES__USER_ROLES_ROLE_ID_FKEY);
    }

    private transient Users.UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users.UsersPath users() {
        if (_users == null)
            _users = new Users.UsersPath(this, Keys.USER_ROLES__USER_ROLES_USER_ID_FKEY, null);

        return _users;
    }

    private transient Roles.RolesPath _roles;

    /**
     * Get the implicit join path to the <code>public.roles</code> table.
     */
    public Roles.RolesPath roles() {
        if (_roles == null)
            _roles = new Roles.RolesPath(this, Keys.USER_ROLES__USER_ROLES_ROLE_ID_FKEY, null);

        return _roles;
    }

    @Override
    public UserRoles as(String alias) {
        return new UserRoles(DSL.name(alias), this);
    }

    @Override
    public UserRoles as(Name alias) {
        return new UserRoles(alias, this);
    }

    @Override
    public UserRoles as(Table<?> alias) {
        return new UserRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoles rename(String name) {
        return new UserRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoles rename(Name name) {
        return new UserRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoles rename(Table<?> name) {
        return new UserRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoles where(Condition condition) {
        return new UserRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
